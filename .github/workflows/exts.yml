#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
# 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Get Exts and Loads

on:
  schedule:
    - cron: '0 0 * * *'

  workflow_dispatch:

jobs:
  exts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run : |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo apt install build-essential libtool pkgconf libzstd-dev liblzma-dev libssl-dev
          pip install requests BeautifulSoup4 kmodule


      - name: Checkout redpill-load s
        run: |
          sudo rm -rf redpill-load_pocopico_develop
          git clone --branch develop https://github.com/pocopico/redpill-load.git redpill-load_pocopico_develop

          sudo rm -rf redpill-load_pocopico_jun
          git clone --branch jun https://github.com/pocopico/redpill-load.git redpill-load_pocopico_jun

          sudo rm -rf redpill-load_jumkey_develop
          git clone --branch develop https://github.com/jumkey/redpill-load.git redpill-load_jumkey_develop
          rm -rf redpill-load_jumkey_develop/config/DVA1622

          sudo rm -rf redpill-load_PeterSuh-Q3_master
          git clone --branch master https://github.com/PeterSuh-Q3/redpill-load.git redpill-load_PeterSuh-Q3_master

          sudo rm -rf redpill-load_wjz304_test-dev
          git clone --branch test-dev https://github.com/wjz304/redpill-load.git redpill-load_wjz304_test-dev

          sudo rm -rf redpill-load_wjz304_test-jun
          git clone --branch test-jun https://github.com/wjz304/redpill-load.git redpill-load_wjz304_test-jun

      - name: Get loads lsit
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import os, json

          root = '' # os.path.dirname(os.path.abspath(__file__))

          def getloadlist(work = 'redpill-load', ignore=[]):
              load = {}
              try:
                  models = os.listdir(os.path.join(root, work, 'config'))
                  models.sort()
                  print(models)
                  for model in models:
                      if model.startswith('.') or model.startswith('_'):
                          continue
                      if os.path.isdir(os.path.join(root, work, 'config', model)):
                          versions = os.listdir(os.path.join(root, work, 'config', model))
                          versions.sort()
                          print(versions)
                          for version in versions:
                              if version in ignore:
                                  continue
                              if os.path.exists(os.path.join(root, work, 'config', model, version, 'config.json')):
                                  if model not in load:
                                      load[model] = []
                                  load[model].append(version)

              except Exception as err:
                  print(err)
              return load

          if __name__ == '__main__':
              loads = {}
              ignore=['7.0-41222', '7.0-41890', '7.1.0-42550', '7.1.0-42621', '7.1.1-42951']

              print('################### pocopico_develop ###################')
              loads["pocopico_develop"] = getloadlist('redpill-load_pocopico_develop', ignore)

              print('##################### pocopico_jun #####################')
              loads["pocopico_jun"] = getloadlist('redpill-load_pocopico_jun', ignore)

              print('#################### jumkey_develop ####################')
              loads["jumkey_develop"] = getloadlist('redpill-load_jumkey_develop', ignore)

              print('################## PeterSuh-Q3_master ##################')
              loads["PeterSuh-Q3_master"] = getloadlist('redpill-load_PeterSuh-Q3_master', ignore)

              print('################## wjz304_test-dev ##################')
              loads["wjz304_test-dev"] = getloadlist('redpill-load_wjz304_test-dev', ignore)

              print('################## wjz304_test-jun ##################')
              loads["wjz304_test-jun"] = getloadlist('redpill-load_wjz304_test-jun', ignore)

              if len(loads) > 0:
                  print('#######################  loads   #######################')
                  print(json.dumps(loads, indent=4))
                  with open(os.path.join(root, 'docs/loads.json'), 'w', encoding='utf-8') as f:
                      f.write(json.dumps(loads, indent=4))


      - name: Get models and toolchain lsit
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import os, re, json, requests
          from bs4 import BeautifulSoup
          
          root = '' # os.path.dirname(os.path.abspath(__file__))

          if __name__ == '__main__':

              # models
              req = requests.get('https://kb.synology.com/en-us/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have')
              req.encoding = 'utf-8'
              bs=BeautifulSoup(req.text, 'html.parser')
              p = re.compile(r"data: (.*?),$", re.MULTILINE | re.DOTALL)
              data = json.loads(p.search(bs.find('script', string=p).prettify()).group(1))

              models=[]
              model='(.*?)'  # (.*?): all, FS6400: one
              p = re.compile(r"\n\t\t\t<td>{}<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t\t<td>(.*?)<\/td>\n\t\t".format(model), re.MULTILINE | re.DOTALL)
              it = p.finditer(data["preload"]["content"])
              for i in it:
                  d = i.groups()
                  if len(d) == 6: d = model + d
                  models.append({"Model":d[0],"CPU Model":d[1],"Cores":d[2],"Threads":d[3],"FPU":d[4],"PackageArch":d[5].lower(),"RAM":d[6]})

              print(json.dumps(models, indent=4))
              with open(os.path.join(root, 'docs/models.json'), 'w', encoding='utf-8') as f:
                  f.write(json.dumps(models, indent=4))


              # toolchain
              req = requests.get('https://archive.synology.cn/download/ToolChain/toolchain')
              req.encoding = 'utf-8'
              bs=BeautifulSoup(req.text, 'html.parser')
              p = re.compile(r"(.*?)-(.*?)", re.MULTILINE | re.DOTALL)
              l = bs.find_all('a', text=p)

              toolchain = {}
              for i in l:
                  req = requests.get('https://archive.synology.cn{}'.format(i.attrs['href']))
                  req.encoding = 'utf-8'
                  bs=BeautifulSoup(req.text, 'html.parser')

                  p = re.compile(r"^(.*?)Linux(.*?)\((.*?)\)$", re.MULTILINE | re.DOTALL)
                  data = bs.find_all('td', text=p)
                  for item in data:
                      info = p.search(item.string).groups()
                      if not i.string in toolchain.keys(): toolchain[i.string] = {}
                      toolchain[i.string][info[2].strip().lower()] = info[1].replace('Linux', '').strip()
                      print(info)
              
              print(toolchain)
              with open(os.path.join(root, 'docs/toolchain.json'), 'w', encoding='utf-8') as f:
                  f.write(json.dumps(toolchain, indent=4))

              # patindo
              models = {}
              with open('doc/loads.json', 'r') as f:
                  models = json.load(f)
              for model in models.keys():
                  req = requests.get('https://www.synology.com/api/support/findDownloadInfo?lang=en-us&product={}'.format(model.replace('+','%2B')))
                  data = json.loads(req.text)
                  data[]
              
              print(toolchain)
              with open(os.path.join(root, 'docs/toolchain.json'), 'w', encoding='utf-8') as f:
                  f.write(json.dumps(toolchain, indent=4))


      - name: Check and Push
        run: |
          git pull
          status=$(git status -s | grep -E 'loads.json|models.json|toolchain.json' | awk '{printf " %s", $2}')
          if [ -n "${status}" ]; then
            git add ${status}
            git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
            git push -f
          fi
